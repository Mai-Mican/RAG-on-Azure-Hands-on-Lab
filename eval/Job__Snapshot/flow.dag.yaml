inputs:
  meteor_params:
    type: object
    default:
      alpha: 0.9
      beta: 3
      gamma: 0.5
    is_chat_input: false
  question:
    type: string
    default: ""
    is_chat_input: false
  rouge_type:
    type: string
    default: rouge1
    is_chat_input: false
  endpoint_url:
    type: string
    default: ""
    is_chat_input: false
  groundedness_service_flight:
    type: string
    default: "false"
    is_chat_input: false
  query:
    type: string
    default: ""
    is_chat_input: false
  model_prompt:
    type: object
    default:
      system_message: ''
      few_shot_examples:
        few_shot_examples: []
      model_type: ''
      model_params:
        temperature: 0.7
        top_p: 0.95
        max_tokens: 800
    is_chat_input: false
  deployment_name:
    type: string
    default: gpt-4o
    is_chat_input: false
  use_qr:
    type: string
    default: "false"
    is_chat_input: false
  answer_generation_deployment_name:
    type: string
    default: gpt-4o
    is_chat_input: false
  answer:
    type: string
    default: ""
    is_chat_input: false
  metrics:
    type: string
    default: gpt_groundedness,f1_score,gpt_fluency,gpt_coherence,gpt_similarity,gpt_relevance,violence,self_harm,sexual,protected_material,xpia,hate_unfairness,bleu_score,gleu_score,meteor_score,rouge_score,eci
    is_chat_input: false
  threshold:
    type: int
    default: 4
    is_chat_input: false
  context:
    type: string
    default: ""
    is_chat_input: false
  ground_truth:
    type: string
    default: ""
    is_chat_input: false
  response:
    type: string
    default: ""
    is_chat_input: false
outputs:
  eci_label:
    type: string
    reference: ${concat_scores.output.eci_label}
    evaluation_only: false
    is_chat_output: false
  gpt_coherence:
    type: string
    reference: ${concat_scores.output.gpt_coherence}
    evaluation_only: false
    is_chat_output: false
  xpia_label:
    type: string
    reference: ${concat_scores.output.xpia_label}
    evaluation_only: false
    is_chat_output: false
  gpt_relevance:
    type: string
    reference: ${concat_scores.output.gpt_relevance}
    evaluation_only: false
    is_chat_output: false
  xpia_information_gathering:
    type: string
    reference: ${concat_scores.output.xpia_information_gathering}
    evaluation_only: false
    is_chat_output: false
  self_harm:
    type: string
    reference: ${concat_scores.output.self_harm}
    evaluation_only: false
    is_chat_output: false
  rouge_f1_score:
    type: string
    reference: ${concat_scores.output.rouge_f1_score}
    evaluation_only: false
    is_chat_output: false
  violence_reason:
    type: string
    reference: ${concat_scores.output.violence_reason}
    evaluation_only: false
    is_chat_output: false
  gleu_score:
    type: string
    reference: ${concat_scores.output.gleu_score}
    evaluation_only: false
    is_chat_output: false
  sexual_reason:
    type: string
    reference: ${concat_scores.output.sexual_reason}
    evaluation_only: false
    is_chat_output: false
  hate_unfairness:
    type: string
    reference: ${concat_scores.output.hate_unfairness}
    evaluation_only: false
    is_chat_output: false
  relevance_reason:
    type: string
    reference: ${concat_scores.output.relevance_reason}
    evaluation_only: false
    is_chat_output: false
  protected_material_reason:
    type: string
    reference: ${concat_scores.output.protected_material_reason}
    evaluation_only: false
    is_chat_output: false
  bleu_score:
    type: string
    reference: ${concat_scores.output.bleu_score}
    evaluation_only: false
    is_chat_output: false
  protected_material_label:
    type: string
    reference: ${concat_scores.output.protected_material_label}
    evaluation_only: false
    is_chat_output: false
  sexual_score:
    type: string
    reference: ${concat_scores.output.sexual_score}
    evaluation_only: false
    is_chat_output: false
  generated_answer:
    type: string
    reference: ${generate_answer_if_not_exist.output}
    evaluation_only: false
    is_chat_output: false
  violence_score:
    type: string
    reference: ${concat_scores.output.violence_score}
    evaluation_only: false
    is_chat_output: false
  coherence_reason:
    type: string
    reference: ${concat_scores.output.coherence_reason}
    evaluation_only: false
    is_chat_output: false
  gpt_groundedness:
    type: string
    reference: ${concat_scores.output.gpt_groundedness}
    evaluation_only: false
    is_chat_output: false
  groundedness_reason:
    type: string
    reference: ${concat_scores.output.groundedness_reason}
    evaluation_only: false
    is_chat_output: false
  xpia_reason:
    type: string
    reference: ${concat_scores.output.xpia_reason}
    evaluation_only: false
    is_chat_output: false
  rouge_precision:
    type: string
    reference: ${concat_scores.output.rouge_precision}
    evaluation_only: false
    is_chat_output: false
  xpia_manipulated_content:
    type: string
    reference: ${concat_scores.output.xpia_manipulated_content}
    evaluation_only: false
    is_chat_output: false
  fluency_reason:
    type: string
    reference: ${concat_scores.output.fluency_reason}
    evaluation_only: false
    is_chat_output: false
  gpt_similarity:
    type: string
    reference: ${concat_scores.output.gpt_similarity}
    evaluation_only: false
    is_chat_output: false
  xpia_intrusion:
    type: string
    reference: ${concat_scores.output.xpia_intrusion}
    evaluation_only: false
    is_chat_output: false
  eci_reason:
    type: string
    reference: ${concat_scores.output.eci_reason}
    evaluation_only: false
    is_chat_output: false
  gpt_fluency:
    type: string
    reference: ${concat_scores.output.gpt_fluency}
    evaluation_only: false
    is_chat_output: false
  sexual:
    type: string
    reference: ${concat_scores.output.sexual}
    evaluation_only: false
    is_chat_output: false
  self_harm_score:
    type: string
    reference: ${concat_scores.output.self_harm_score}
    evaluation_only: false
    is_chat_output: false
  rouge_recall:
    type: string
    reference: ${concat_scores.output.rouge_recall}
    evaluation_only: false
    is_chat_output: false
  hate_unfairness_reason:
    type: string
    reference: ${concat_scores.output.hate_unfairness_reason}
    evaluation_only: false
    is_chat_output: false
  violence:
    type: string
    reference: ${concat_scores.output.violence}
    evaluation_only: false
    is_chat_output: false
  hate_unfairness_score:
    type: string
    reference: ${concat_scores.output.hate_unfairness_score}
    evaluation_only: false
    is_chat_output: false
  self_harm_reason:
    type: string
    reference: ${concat_scores.output.self_harm_reason}
    evaluation_only: false
    is_chat_output: false
  f1_score:
    type: string
    reference: ${concat_scores.output.f1_score}
    evaluation_only: false
    is_chat_output: false
  meteor_score:
    type: string
    reference: ${concat_scores.output.meteor_score}
    evaluation_only: false
    is_chat_output: false
nodes:
- name: generate_answer_if_not_exist
  type: python
  source:
    type: code
    path: generate_answer_if_not_exist.py
  inputs:
    answer: "${inputs.answer}"
    context: "${inputs.context}"
    deployment_name: "${inputs.answer_generation_deployment_name}"
    endpoint_url: "${inputs.endpoint_url}"
    model_prompt: "${inputs.model_prompt}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${inputs.response}"
    use_qr: "${inputs.use_qr}"
    connection: "ai-testhub20241201124224481418_aoai"
  aggregation: false
- name: run_f1_score_evaluator
  type: python
  source:
    type: code
    path: f1_score.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    ground_truth: "${inputs.ground_truth}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.f1_score}
    is: true
  aggregation: false
- name: run_bleu_score_evaluator
  type: python
  source:
    type: code
    path: run_bleu_score_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    ground_truth: "${inputs.ground_truth}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.bleu_score}
    is: true
  aggregation: false
- name: run_gleu_score_evaluator
  type: python
  source:
    type: code
    path: run_gleu_score_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    ground_truth: "${inputs.ground_truth}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.gleu_score}
    is: true
  aggregation: false
- name: run_meteor_score_evaluator
  type: python
  source:
    type: code
    path: run_meteor_score_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    ground_truth: "${inputs.ground_truth}"
    meteor_params: "${inputs.meteor_params}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.meteor_score}
    is: true
  aggregation: false
- name: run_rouge_score_evaluator
  type: python
  source:
    type: code
    path: run_rouge_score_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    ground_truth: "${inputs.ground_truth}"
    response: "${generate_answer_if_not_exist.output}"
    rouge_type: "${inputs.rouge_type}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.rouge_score}
    is: true
  aggregation: false
- name: run_gpt_coherence_evaluator
  type: python
  source:
    type: code
    path: run_gpt_coherence_evaluator.py
  inputs:
    connection: "ai-testhub20241201124224481418_aoai"
    answer: "${generate_answer_if_not_exist.output}"
    deployment_name: "${inputs.deployment_name}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.gpt_coherence}
    is: true
  aggregation: false
- name: run_gpt_fluency_evaluator
  type: python
  source:
    type: code
    path: run_gpt_fluency_evaluator.py
  inputs:
    connection: "ai-testhub20241201124224481418_aoai"
    answer: "${generate_answer_if_not_exist.output}"
    deployment_name: "${inputs.deployment_name}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.gpt_fluency}
    is: true
  aggregation: false
- name: run_gpt_relevance_evaluator
  type: python
  source:
    type: code
    path: run_gpt_relevance_evaluator.py
  inputs:
    connection: "ai-testhub20241201124224481418_aoai"
    answer: "${generate_answer_if_not_exist.output}"
    deployment_name: "${inputs.deployment_name}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.gpt_relevance}
    is: true
  aggregation: false
- name: run_gpt_similarity_evaluator
  type: python
  source:
    type: code
    path: run_gpt_similarity_evaluator.py
  inputs:
    connection: "ai-testhub20241201124224481418_aoai"
    answer: "${generate_answer_if_not_exist.output}"
    deployment_name: "${inputs.deployment_name}"
    ground_truth: "${inputs.ground_truth}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.gpt_similarity}
    is: true
  aggregation: false
- name: aggregate_variants_results
  type: python
  source:
    type: code
    path: aggregate_variants_results.py
  inputs:
    results: "${concat_scores.output}"
    selected_metrics: "${select_metrics.output}"
    thresholds: "${inputs.threshold}"
  aggregation: true
- name: select_metrics
  type: python
  source:
    type: code
    path: select_metrics.py
  inputs:
    metrics: "${inputs.metrics}"
  aggregation: false
- name: validate_input
  type: python
  source:
    type: code
    path: validate_input.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    context: "${inputs.context}"
    ground_truth: "${inputs.ground_truth}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    selected_metrics: "${select_metrics.output}"
    use_qr: "${inputs.use_qr}"
  aggregation: false
- name: run_hate_unfairness_evaluator
  type: python
  source:
    type: code
    path: run_hate_unfairness_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.hate_unfairness}
    is: true
  aggregation: false
- name: run_self_harm_evaluator
  type: python
  source:
    type: code
    path: run_self_harm_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.self_harm}
    is: true
  aggregation: false
- name: run_sexual_evaluator
  type: python
  source:
    type: code
    path: run_sexual_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.sexual}
    is: true
  aggregation: false
- name: run_violence_evaluator
  type: python
  source:
    type: code
    path: run_violence_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.violence}
    is: true
  aggregation: false
- name: run_protected_material_evaluator
  type: python
  source:
    type: code
    path: run_protected_material_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.protected_material}
    is: true
  aggregation: false
- name: run_xpia_evaluator
  type: python
  source:
    type: code
    path: run_xpia_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.xpia}
    is: true
  aggregation: false
- name: run_eci_evaluator
  type: python
  source:
    type: code
    path: run_eci_evaluator.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_input.output.eci}
    is: true
  aggregation: false
- name: concat_scores
  type: python
  source:
    type: code
    path: concat_results.py
  inputs:
    bleu_score_results: "${run_bleu_score_evaluator.output}"
    eci_results: "${run_eci_evaluator.output}"
    f1_score_results: "${run_f1_score_evaluator.output}"
    gleu_score_results: "${run_gleu_score_evaluator.output}"
    gpt_coherence_results: "${run_gpt_coherence_evaluator.output}"
    gpt_fluency_results: "${run_gpt_fluency_evaluator.output}"
    gpt_relevance_results: "${run_gpt_relevance_evaluator.output}"
    gpt_similarity_results: "${run_gpt_similarity_evaluator.output}"
    gpt_groundedness_results: "${run_gpt_groundedness_evaluator.output}"
    hate_unfairness_results: "${run_hate_unfairness_evaluator.output}"
    meteor_score_results: "${run_meteor_score_evaluator.output}"
    protected_material_results: "${run_protected_material_evaluator.output}"
    rouge_score_results: "${run_rouge_score_evaluator.output}"
    self_harm_results: "${run_self_harm_evaluator.output}"
    sexual_results: "${run_sexual_evaluator.output}"
    violence_results: "${run_violence_evaluator.output}"
    xpia_results: "${run_xpia_evaluator.output}"
  aggregation: false
- name: validate_service
  type: python
  source:
    type: code
    path: validate_groundedness_service.py
  inputs:
    flight: "${inputs.groundedness_service_flight}"
    selected_metrics: "${select_metrics.output}"
    validated_input: "${validate_input.output}"
  aggregation: false
- name: construct_groundedness_request
  type: python
  source:
    type: code
    path: construct_groundedness_request.py
  inputs:
    answer: "${generate_answer_if_not_exist.output}"
    context: "${inputs.context}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_service.output.groundedness_service}
    is: true
  aggregation: false
- name: call_groundedness_service
  type: python
  source:
    type: code
    path: call_groundedness_service.py
  inputs:
    request_body: "${construct_groundedness_request.output}"
  activate:
    when: ${validate_service.output.groundedness_service}
    is: true
  aggregation: false
- name: parse_groundedness_response
  type: python
  source:
    type: code
    path: parse_groundedness_response.py
  inputs:
    batch_response: "${call_groundedness_service.output}"
    is_service_available: "${validate_service.output}"
  aggregation: false
- name: run_gpt_groundedness_evaluator
  type: python
  source:
    type: code
    path: run_gpt_groundedness_evaluator.py
  inputs:
    connection: "ai-testhub20241201124224481418_aoai"
    answer: "${generate_answer_if_not_exist.output}"
    context: "${inputs.context}"
    deployment_name: "${inputs.deployment_name}"
    query: "${inputs.query}"
    question: "${inputs.question}"
    response: "${generate_answer_if_not_exist.output}"
    use_qr: "${inputs.use_qr}"
  activate:
    when: ${validate_service.output.groundedness_prompt}
    is: true
  aggregation: false
environment:
  python_requirements_txt: requirements.txt
environment_variables:
  PF_WORKER_COUNT: 2
